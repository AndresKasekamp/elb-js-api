import{e as s,y as i,c as k,G as T,kI as x,kJ as N,B as y,P as D,b as f,L as A,F,K as S,a1 as j,kL as R,aC as q,hR as z,kM as K,kK as J,x as I,E as Q,kN as E,kS as b,kO as M,dW as w,d2 as U,kT as X,kP as Y,kQ as Z,co as ee,hr as te,cw as se,cr as ie,kV as re,k_ as L,aa as ne,dV as oe,kX as G,hD as ae,hF as B,br as le,kY as P,kZ as he}from"./index-pCX-0tJH.js";import{l as ce}from"./Draw-yCejAdh-.js";import{l as ue,d as me,v as de,x as pe}from"./InteractiveToolBase-6mltmL27.js";import{S as ve}from"./GraphicManipulator-59Uc2I6c.js";import{n as ye,u as we}from"./MeasurementWidgetContent-PH9XFoV4.js";import"./SnappingVisualizer2D-JqQy3X5x.js";import"./SnappingContext-ax0tf6c6.js";import"./PointSnappingHint-bwlQAyn6.js";import"./EditGeometryOperations-vpHcsZOg.js";import"./SnappingOperation-hED0OM8D.js";import"./drawSurfaces-t1mGEx1r.js";import"./dehydratedFeatureComparison-IJSogXWn.js";import"./SnappingDragPipelineStep-HDAWWRgo.js";import"./drawUtils-0wb2c6-q.js";import"./drapedUtils-F1ywqHD-.js";const g=1e5;let m=class extends ue{constructor(e){super(e),this._drawActive=!1,this._measurementLayer=new T({internal:!0,listMode:"hide",visible:!1}),this._manipulatorLayer=new T({internal:!0,listMode:"hide",visible:!1}),this._vertices=[],this.geodesicDistanceThreshold=1e5,this.measurement=null,this.measurementLabel=null}initialize(){x("esri/core/t9n/Units").then(t=>{this.messages=t}),this.addHandles(N(async()=>{this.messages=await x("esri/core/t9n/Units")}));const e=this.view;this._draw=new ce({view:e}),e.map.addMany([this._measurementLayer,this._manipulatorLayer]),e.focus(),this.addHandles([y(()=>[this.unit,this.geodesicDistanceThreshold,this.messages],()=>{this._updatePolylines()},D),y(()=>[this.view.effectiveTheme.accentColor,this.view.effectiveTheme.textColor],()=>{if(!this._vertices.length)return;const t=this._vertices.map(({coord:r})=>r);for(const{handle:r}of this._vertices)r.remove();this._vertices=[],this._measurementLayer.removeAll(),this._manipulatorLayer.removeAll(),this.manipulators.removeAll(),this._updateSketch(t)})])}destroy(){const{map:e}=this.view;this._draw.view=null,this._draw=f(this._draw),e.removeMany([this._measurementLayer,this._manipulatorLayer]),this._measurementLayer.removeAll(),this._manipulatorLayer.removeAll(),this._set("measurement",null),this._set("measurementLabel",null),this._measurementLayer=f(this._measurementLayer),this._manipulatorLayer=f(this._manipulatorLayer),this._resetVertices()}get cursor(){return this._drawActive?"crosshair":null}set editable(e){this._set("editable",e),e||this._draw.reset()}onActivate(){this._drawActive||this._vertices.length!==0||this._startSketch()}onShow(){this._measurementLayer.visible=!0,this._manipulatorLayer.visible=!0}onHide(){this._measurementLayer.visible=!1,this._manipulatorLayer.visible=!1}_resetVertices(){for(const{handle:e}of this._vertices)e.remove();this._vertices=[]}_startSketch(){this._drawActive=!0;const e=this._draw.create("polyline",{mode:"click"});e.on(["vertex-add","vertex-update","vertex-remove","cursor-update","undo","redo"],t=>this._updateSketch(t.vertices)),e.on("draw-complete",()=>{this._stopSketch()})}_stopSketch(){this.manipulators.forEach(({manipulator:e})=>{e.interactive=!0}),this._drawActive=!1,this.finishToolCreation()}_updateSketch(e){const{spatialReference:t}=this.view;for(;this._vertices.length>e.length;){const{handle:n,manipulator:u}=this._vertices.pop();n.remove(),this.manipulators.remove(u)}for(let n=this._vertices.length;n<e.length;n++){const[u,p]=e[n],v=ge(new A({x:u,y:p,spatialReference:t}),this.view,this._manipulatorLayer);this.manipulators.add(v);const _=me(v,(C,H)=>{H.next(de(this.view)).next(pe(C.graphic,F.Local)).next(()=>{const O=C.graphic.geometry;this._vertices[n].coord=[O.x,O.y],this._updatePolylines()})});this._vertices.push({manipulator:v,coord:[u,p],handle:_})}const r=this._vertices.length-1,o=this._vertices[r],[l,a]=e[r];o.coord[0]===l&&o.coord[1]===a||(o.coord=[l,a],o.manipulator.graphic.geometry=new A({x:l,y:a,spatialReference:t}));const h=this._drawActive?this._vertices[r].manipulator:null;this.manipulators.forEach(({manipulator:n})=>{n.interactive=h==null||n!==h}),this._updatePolylines()}_updatePolylines(){var v;if(this._vertices.length<2)return void this._measurementLayer.removeAll();const e=this._vertices.map(({coord:_})=>_),{measurement:t,drawing:r,original:o}=_e(e,this.view.spatialReference,this.geodesicDistanceThreshold);this._set("measurement",t);const l=Me(this.messages,t,this.unit);let a,h;this._set("measurementLabel",l);const{graphics:n}=this._measurementLayer,u=n.length===2,{effectiveTheme:p}=this.view;u?(a=n.at(0),h=n.at(1)):(a=new S({symbol:new j({data:{type:"CIMSymbolReference",symbol:{type:"CIMLineSymbol",symbolLayers:[{type:"CIMSolidStroke",effects:[{type:"CIMGeometricEffectDashes",dashTemplate:[14,12],lineDashEnding:"FullGap",controlPointEnding:"NoConstraint"}],enable:!0,capStyle:"Butt",joinStyle:"Round",width:3.5,color:R(p.accentColor).toArray()},{type:"CIMSolidStroke",enable:!0,capStyle:"Butt",joinStyle:"Round",width:5,color:p.accentColor.toArray()}]}}})}),h=new S({symbol:new q({color:p.textColor,haloColor:z(R(p.textColor,K.Low),.5),haloSize:2,font:new J({size:14,family:"sans-serif"})})}),n.removeAll(),n.addMany([a,h])),a.geometry=r,h.geometry=(v=o.extent)==null?void 0:v.center,h.symbol.text=l}};function ge(e,t,r){const o=z(t.effectiveTheme.accentColor,.5),l={type:"simple-line",width:0},a=8,h=new I({style:"circle",color:o,size:a,outline:l}),n=new I({style:"circle",color:o,size:1.5*a,outline:l}),u=new S({geometry:e,symbol:h});return new ve({view:t,layer:r,graphic:u,focusedSymbol:n})}function _e(e,t,r){const o=new Q({paths:[e],spatialReference:t});let l,a;if(t.isGeographic)if(E(t))l=b([o],"meters")[0],a=M(o,g);else{const h=w(o,U.WGS84),n=M(h,g);l=b([h],"meters")[0],a=w(n,t)}else if(t.isWebMercator)l=X(o,"meters"),a=Y(o,g,"meters");else{const h=Z(o,"meters");if(h>=r){const n=w(o,U.WGS84),u=M(n,g);l=b([n],"meters")[0],a=w(u,t)}else l=h,a=o}return{measurement:{geometry:a,length:l},original:o,drawing:a}}function fe(e){return e!=null}function be(e){if(!e)return!1;const{isGeographic:t,isWebMercator:r,isWGS84:o}=e;return t&&!o&&!E(e)||!t&&!r}function Me(e,t,r){if(!t||!e)return"";switch(r){case"metric":return ie(e,t.length,"meters");case"imperial":return se(e,t.length,"meters");default:return ee(e,te(t.length,"meters",r),r)}}s([i()],m.prototype,"_drawActive",void 0),s([i({readOnly:!0})],m.prototype,"cursor",null),s([i({value:!0})],m.prototype,"editable",null),s([i({type:Number})],m.prototype,"geodesicDistanceThreshold",void 0),s([i({readOnly:!0})],m.prototype,"measurement",void 0),s([i({readOnly:!0})],m.prototype,"measurementLabel",void 0),s([i()],m.prototype,"messages",void 0),s([i()],m.prototype,"unit",void 0),s([i({constructOnly:!0})],m.prototype,"view",void 0),m=s([k("esri.widgets.DistanceMeasurement2D.DistanceMeasurement2DTool")],m);let d=class extends ye{constructor(e){super(e),this.supportedViewType="2d",this.unsupportedErrorMessage="DistanceMeasurement2DViewModel is only supported in 2D views.",this.geodesicDistanceThreshold=1e5}initialize(){this.addHandles([y(()=>{var e;return(e=this.view)==null?void 0:e.spatialReference},()=>this.clear()),y(()=>this.unit,e=>{this.tool!=null&&(this.tool.unit=e)},D),y(()=>this.geodesicDistanceThreshold,e=>{this.tool!=null&&(this.tool.geodesicDistanceThreshold=e)},D)])}get measurement(){return this.tool!=null?this.tool.measurement:null}get measurementLabel(){return this.tool!=null?this.tool.measurementLabel:null}get state(){var e;return this.disabled||this.view==null||!fe((e=this.view)==null?void 0:e.spatialReference)?"disabled":this.tool!=null&&this.measurement?this.tool.active?"measuring":"measured":"ready"}get unit(){return this._validateUnit(this.defaultUnit)}set unit(e){this._overrideIfSome("unit",this._validateUnit(e))}get unitOptions(){return L}set unitOptions(e){this._overrideIfSome("unitOptions",this._validateUnits(e))}async start(){const e=this.view;e!=null&&(await ne(()=>e.ready),be(e.spatialReference)&&await oe()),this.createTool({interactive:!0})}clear(){this.removeTool()}constructTool(){return new m({view:this.view,visible:this.visible,geodesicDistanceThreshold:this.geodesicDistanceThreshold,unit:this.unit})}_validateUnit(e){const{unitOptions:t,defaultUnit:r}=this;return e!=null&&t.includes(e)?e:t.includes(r)?r:t.length>0?t[0]:r}_validateUnits(e){if(e==null)return[];const t=e.filter(r=>L.includes(r));return t.length===0?L.slice():t}};s([i(re)],d.prototype,"defaultUnit",void 0),s([i({type:Number})],d.prototype,"geodesicDistanceThreshold",void 0),s([i({readOnly:!0})],d.prototype,"measurement",null),s([i({readOnly:!0})],d.prototype,"measurementLabel",null),s([i({readOnly:!0})],d.prototype,"state",null),s([i({type:String})],d.prototype,"unit",null),s([i({type:[String]})],d.prototype,"unitOptions",null),d=s([k("esri.widgets.DistanceMeasurement2D.DistanceMeasurement2DViewModel")],d);const W=d,V="esri-distance-measurement-2d",$={base:V,newMeasurementButton:`${V}__clear-button`,widgetIcon:he.measureLine};let c=class extends ae{constructor(e,t){super(e,t),this.iconClass=$.widgetIcon,this.icon=null,this.messages=null,this.messagesCommon=null,this.viewModel=new W}get active(){return this.viewModel.active}get label(){var e;return((e=this.messages)==null?void 0:e.widgetLabel)??""}set label(e){this._overrideIfSome("label",e)}get unit(){return this.viewModel.unit}set unit(e){this.viewModel.unit=e}get unitOptions(){return this.viewModel.unitOptions}set unitOptions(e){this.viewModel.unitOptions=e}get view(){return this.viewModel.view}set view(e){this.viewModel.view=e}get visible(){return this.viewModel.visible}set visible(e){this.viewModel.visible=e}render(){const{messages:e,messagesCommon:t,unit:r,unitOptions:o,viewModel:l}=this,{active:a,measurementLabel:h,state:n,supported:u}=l;return B("div",{"aria-label":this.messages.widgetLabel,class:this.classes($.base,P.widget,P.panel),key:this,role:"presentation"},this.visible?B(we,{active:a,measurementItems:[{key:"distance",title:e.distance,value:h}],messages:{...e,notApplicable:t.notApplicable},newMeasurementButtonClass:$.newMeasurementButton,state:n,supported:u,unit:r,unitOptions:o,onNewMeasurementClick:()=>{le(this.viewModel.start())},onUnitChange:p=>{this.unit=p}}):null)}};s([i({readOnly:!0})],c.prototype,"active",null),s([i()],c.prototype,"iconClass",void 0),s([i()],c.prototype,"icon",void 0),s([i()],c.prototype,"label",null),s([i()],c.prototype,"uiStrings",void 0),s([i(),G("esri/widgets/DistanceMeasurement2D/t9n/DistanceMeasurement2D")],c.prototype,"messages",void 0),s([i(),G("esri/t9n/common")],c.prototype,"messagesCommon",void 0),s([i()],c.prototype,"unit",null),s([i()],c.prototype,"unitOptions",null),s([i()],c.prototype,"view",null),s([i({type:W})],c.prototype,"viewModel",void 0),s([i({type:Boolean})],c.prototype,"visible",null),c=s([k("esri.widgets.DistanceMeasurement2D")],c);const Pe=c;export{Pe as default};
